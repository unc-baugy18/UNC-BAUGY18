const sheetURL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSztBiOrLFMqZs_7g2TGdM1UxlnKoTbO7WtaQdFiODdqNe9YcVWr_rZx7ojWIqTKzychK_i1DohWD1w/pub?output=csv&gid=284553090";
// Le proxy est conserv√© pour √©viter les probl√®mes de CORS avec Google
const proxyURL = `https://api.allorigins.win/get?url=${encodeURIComponent(sheetURL)}`;
var globalSheetData;

// --- FONCTION PRINCIPALE MISE √Ä JOUR ---
async function fetchSheetData() {
    try {
        const response = await fetch(proxyURL, { mode: 'cors' });
        const data = await response.json();
        
        // üöÄ CORRECTION : On utilise directement le contenu de la propri√©t√© 'contents'
        const decodedCSV = data.contents; 
        
        // La premi√®re ligne du contenu est le pr√©fixe "data:text/csv;base64," qu'il faut retirer
        // Cependant, l'API allorigins.win renvoie juste le texte CSV dans 'contents'.
        // Si vous recevez le Base64, la ligne ci-dessous le g√®re. 
        
        // ‚ùå ATTENTION : Bas√© sur le contenu que vous avez montr√©, 'contents' contient
        // "data:text/csv;base64,..." et le Base64 est encod√© dans une seule ligne.
        // MAJ : Non, votre r√©ponse JSON indique que "contents" contient une cha√Æne 
        // qui COMMENCE par "data:text/csv;base64,..." suivi des donn√©es Base64.
        
        // Si la r√©ponse est exactement celle que vous avez montr√©e, le contenu est
        // le CSV encod√© en Base64. L'expression r√©guli√®re est presque juste, 
        // il faut retirer le "charset=utf-8;" manquant.
        
        // Nouvelle expression r√©guli√®re simplifi√©e
        const base64Match = decodedCSV.match(/base64,(.*)/s); // Capture tout apr√®s "base64," (le 's' est optionnel mais assure la capture sur plusieurs lignes si Base64 √©tait structur√©).

        if (!base64Match || !base64Match[1]) {
            throw new Error("Base64 data not found in response contents.");
        }
        
        const base64Data = base64Match[1];
        
        // D√©codage standard Base64 en JavaScript
        const decodedCSVContent = atob(base64Data);

        // Vous n'avez plus besoin du Uint8Array pour le d√©codage simple en utf-8 (atob le g√®re)
        globalSheetData = parseCSV(decodedCSVContent);
        
    } catch (error) {
        console.error("Erreur lors de la r√©cup√©ration ou du d√©codage des donn√©es :", error);
        globalSheetData = [];
    }
}
// ---------------------------------------------


function parseCSV(csv) {
    const lines = csv.split("\n");
    const result = [];
    // üí° REMARQUE IMPORTANTE : L'en-t√™te du CSV d√©cod√© est "Mois / P√©riode,Ann√©e,Num√©ro (si dispo),Lien Calam√©o,Lien image (si dispo)\r"
    // Le s√©parateur est ','
    for (let i = 1; i < lines.length; i++) {
        const line = lines[i].trim(); // Trim pour enlever les espaces blancs/sauts de ligne
        if (line === "") continue; // Ignorer les lignes vides
        
        const columns = line.split(","); // S√©parer par la virgule
        
        if (columns.length >= 5) { // S'assurer que nous avons au moins 5 colonnes
            // Votre code de parsing initial :
            const numberColumn = columns[2].trim();
            
            // On v√©rifie le format du num√©ro. Il est "N¬∞ XXXX".
            // split(" ")[1] est correct si la colonne est "N¬∞ XXXX", mais fragile.
            const numberMatch = numberColumn.match(/(\d+)$/); // Extrait la s√©quence de chiffres √† la fin
            const number = numberMatch ? numberMatch[1] : '';

            result.push({
                date: columns[0].trim(), 
                year: columns[1].trim(), 
                number: number, // Utilisation de l'extraction plus robuste
                link: columns[3].trim(), 
                image: columns[4].trim() 
            });
        }
    }
    return result;
}

// ... Reste du code (qui ne n√©cessite pas de modification) ...

fetchSheetData().then(() => {
    // ... Tri et affichage ...
    console.log("Les donn√©es sont charg√©es et pr√™tes √† √™tre affich√©es :", globalSheetData.length, "√©l√©ments.");
    
    // Le reste de votre code DOM va s'ex√©cuter ici.
    globalSheetData.sort((a, b) => {
        return parseInt(a.number) - parseInt(b.number);
    }).reverse();
    globalSheetData = globalSheetData.filter(item => item.link !== "" && item.image !== "");
    
    const carrousselElementsDiv = document.querySelector(".carroussel-elements");
    if (carrousselElementsDiv) { // S'assurer que l'√©l√©ment DOM existe
         carrousselElementsDiv.innerHTML = ""; // Optionnel : pour effacer un message de chargement
    }

    globalSheetData.forEach(item => {
        // ... cr√©ation des √©l√©ments DOM ...
        if (carrousselElementsDiv) {
            const carrousselCardDiv = document.createElement("a");
            carrousselCardDiv.href = item.link;
            carrousselCardDiv.classList.add("card-magazine");
            carrousselCardDiv.innerHTML = `<div class="card-magazine-image">
                                                <img src="${item.image}" alt="${item.number}" onerror="this.onerror=null;this.src='https://placehold.co/165x230/aabbcc/ffffff?text=n¬∞${item.number}';">
                                            </div>
                                            <p>${item.date} ${item.year}</p>`;  
            carrousselElementsDiv.appendChild(carrousselCardDiv);
        }
    });
});